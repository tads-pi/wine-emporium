openapi: 3.0.3
info:
  title: Wine Emporium
  description: Wine Emporium Shop project
  version: 0.0.1
servers:
  - url: http://localhost:3000
    description: Local URL
  - url: https://api.dev.wineemporium.shop
    description: Development URL
  - url: https://api.wineemporium.shop
    description: Production URL
security:
  - Authorization: []
paths:
  /health:
    get:
      tags:
        - /health
      summary: Check API Health Status
      responses:
        '200':
          description: ok
        '500':
          description: InternalError
        '502':
          description: InternalServerError

  /backoffice/auth:
    post:
      tags:
        - /backoffice/auth
      summary: Authenticate User in Backoffice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackofficeUserLoginRequest"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackofficeUserLoginResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvaidFieldsResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  
  /backoffice/user/{user_id}:
    get:
      tags:
        - /backoffice/user/{user_id}
      summary: Get Some Backoffice User
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBackofficeUserResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvaidFieldsResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
    put:
      tags:
        - /backoffice/user/{user_id}
      summary: Update User in Backoffice
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBackofficeUserRequest"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBackofficeUserResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvaidFieldsResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
    delete:
      tags:
        - /backoffice/user/{user_id}
      summary: Delete User in Backoffice
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBackofficeUserResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvaidFieldsResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

  /backoffice/user/{user_id}/toggle-active:  
    delete:
      tags:
        - /backoffice/user/{user_id}/toggle-active
      summary: Toggle User Active status in Backoffice
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to toggle active
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToggleBackofficeUserActiveResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvaidFieldsResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

  /backoffice/user:
    get:
      tags:
        - /backoffice/user
      summary: Get all Backoffice Users
      security:
        - Authorization: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Página de Pesquisa
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
          description: Número de itens para se retornar por página
          example: 10
        - in: query
          name: filters
          schema:
            type: string
          description: Filtros de pesquisa baseado nos parâmetros retornados. 
          example: group:ADMINISTRADOR,name:Fulano

      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBackofficeUsersResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvaidFieldsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
    post:
      tags:
        - /backoffice/user
      summary: Create new User in Backoffice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveBackofficeUserRequest"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveBackofficeUserResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvaidFieldsResponse'
        '500':
          description: InternalError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
components:
  schemas:
    InternalErrorResponse:
      type: object
      properties:
        message:
          type: string
          default: error at x
    InvaidFieldsResponse:
      type: object
      properties:
        message:
          type: string
          default: 'Invalid Fields: name, email, password, document, group'
    ForbiddenErrorResponse:
      type: object
      properties:
        nessage:
          type: string
          default: 'Usuário não tem permissão para x'
    GetAllBackofficeUsersResponse:
      type: array
      items:
        $ref: '#/components/schemas/backofficeUser'
    GetBackofficeUserResponse:
      $ref: '#/components/schemas/backofficeUser'
    BackofficeUserLoginRequest:
      type: object
      properties:
        username:
          type: string
          default: "admin"
        password:
          type: string
          default: "senha"
    BackofficeUserLoginResponse:
      type: object
      properties:
        access_token:
          type: string
          default: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImVtYWlsQGV4YW1wbGUuY29tIiwiaWF0IjoxNjkzNDg1NjU1LCJleHAiOjE2OTM0ODkyNTV9.KUItqDoLggkKhq4s6enhG0xLx65KsMRz1dZXQSMme00"
        expires_in:
          type: number
          default: 3600
    SaveBackofficeUserRequest:
      type: object
      properties:
        name:
          type: string
          default: "Fulano de Tal"
        document:
          type: string
          default: "012.345.678-90"
        email:
          type: string
          default: "email@example"
        password:
          type: string
          default: "password123"
        group:
          type: string
          enum: ["ADMINISTRADOR", "ESTOQUISTA"]
    SaveBackofficeUserResponse:
      type: object
      properties:
        message:
          type: string
          default: "Usuário criado com sucesso."
    UpdateBackofficeUserRequest:
      type: object
      properties:
        name:
          type: string
        document:
          type: string
        password:
          type: string
        group:
          type: string
    DeleteBackofficeUserResponse:
      type: object
      properties:
        message:
          type: string
          default: "Usuário deletado com sucesso."
    ToggleBackofficeUserActiveResponse:
      type: object
      properties:
        message:
          type: string
          enum: ["Usuário desativado com sucesso.", "Usuário ativado com sucesso."]
    UpdateBackofficeUserResponse:
      type: object
      properties:
        message:
          type: string
          default: "Usuário atualizado com sucesso"
    backofficeUser:
      type: object
      properties:
        id:
          type: number
          default: 1
        name:
          type: string
          default: Fausto Silva
        document:
          type: string
          default: 000.000.000-00
        email:
          type: string
          default: email@example.com
        password:
          type: string
          default: '***'
        group:
          type: string
          default: Admin
        active:
          type: boolean
          default: true
        deleted:
          type: boolean
          default: false
        createAt:
          type: string
          default: '2023-08-30T04:56:15.000Z'
        updatedAt:
          type: string
          default: '2023-08-30T04:56:15.000Z'
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT 
